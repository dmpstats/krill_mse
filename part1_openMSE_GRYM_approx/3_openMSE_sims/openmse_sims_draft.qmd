---
subtitle: "Reproducing the Grym's base case for the krill fishery using the openMSE framework"
---

# openMSE Approximation {#sec-openmse-sims}

```{r preamble}
#| echo: false
#| message: false
#| warning: false

# Load required R packages
library(openMSE)
library(Grym)
library(tidyverse)
library(readxl)
library(flextable)
library(furrr)
library(progressr)
library(patchwork)
library(ggplot2)
library(tictoc)
library(MetBrewer)
library(cli)
library(ggdensity)
library(ggdist)
library(rlang)
library(mvtnorm)
library(openxlsx)

# ggplot default theme
theme_set(theme_bw())

# flextable default settings
set_flextable_defaults(
  digits = 4,
  font.size = 10, 
  font.family = "Calibri",
  theme_fun = "theme_zebra",
  table.layout = "autofit"
)

outputs_path <- "../part1_shared_files/outputs/openmse_results"
fs::dir_create(outputs_path)

source("build_OM_grym_approx.r")
source("ccamlr_krill_mngnt_fcts.R")
```

## Introduction

<< Placeholder: content coming soon >>

[Short Intro]

[Framework structure: OM; MP and PM]


[Goal]


## Configuring openMSE


<!-- 

Out of the box differences with Grym:
 - Yearly time steps
 - recruitment
 - historical period
 - etc

-->



```{r}
#| warning: false
#| code-fold: true

grym_setups <- read_rds("../part1_shared_files/data/grym_scen_setups.rds")

```


### Define Operating Models


```{r}
#| eval: false

openmse_scen_OMs <- grym_setups |>
  select(scenario_id:matrange, t0:Ages, prRecruitPars) |>
  rowwise() |>
  mutate(
    OM = list(
      build_OM_grym_approx(
        om_name = glue::glue("krill_grym_approx_{scenario_id}"),  
        maxage = last(Ages), Linf = Linf, K = K, t0 = t0, 
        mat50Min = mat50Min, mat50Max = mat50Max, matrange = matrange, 
        sel50Min = sel50Min, sel50Max = sel50Max, selrange = selrange, 
        a = a, b = b, 
        M_draws = pull(prRecruitPars, M) , RCV_draws = pull(prRecruitPars, CV),
        maxF = Fmax, n_iter = n_iter, proj_yrs = n.years
      )
    )
  ) |>
  pull(OM)

names(openmse_scen_OMs) <- grym_setups$scenario_id

write_rds(openmse_scen_OMs, "../part1_shared_files/data/openmse_scen_OMs.rds")

```


```{r}
#| echo: false
openmse_scen_OMs <- read_rds("../part1_shared_files/data/openmse_scen_OMs.rds")
```




Document choice of input parameter values for one of the scenarios. Start by
initializing the rmarkdown file of the report, which is generated by openMSE.
The documentation step is performed externally to this document.

```{r}
#| eval: false

# initialize OM report for scn-1
OMinit(name = "OM_krill_grym_approx_scn-1", files = "rmd", overwrite = FALSE)

```

Once OM is suitably documented, we compile the report. The resultant document can be viewed in @sec-annex-1

::: {.callout-important}
Due to a bug in `MSEtool::OMdoc()`, the number of years to project the
population forward must be set to 50 years, otherwise the markdown rendering
process fails. This issue is exclusive to the `OM_doc` function.
:::


```{r}
#| eval: false

source("OMdoc_dmp.r")

# Length of projection must be 50 years, otherwise compilation crashes due to bug in OMdoc
OM_to_report <- openmse_scen_OMs$`scn-1`
OM_to_report@proyears <- 50

OMdoc_dmp(OM_to_report, rmd.source = "OM_krill_grym_approx_scn-1.rmd", html_theme = "lumen")

```



```{r}
#| eval: false
#| code-fold: true

# Note: openMSE takes some time to run, so this code chunk must only be executed
# interactively, i.e. it shouldn't be evaluated during document rendering

# get one random draw of PR parameters 
PR_pars <- grym_setups |>
  filter(scenario_id == "scn-1") |> 
  select(prRecruitPars) |> 
  unnest(prRecruitPars) |>
  slice(1)
  
# --- Simulate recruitment series from Grym functions
grym_rec_simulator <- grym_setups |>
  filter(scenario_id == "scn-1") |>
  select(prRecruit) |>
  pluck(1, 1)
  
R_grym <- tibble(
  framework = "Grym", 
  R = grym_rec_simulator(n = 25000, mn = PR_pars$mnQ, vr = PR_pars$vrQ)
)

# --- Simulate recruitment series from openMSE
OM_test <- openmse_scen_OMs$`scn-1`
OM_test@nsim <- 5000
# change steepness to 1 for equivalence between the two approaches. Grym applies
# depletion reduction at a later stage of the simulation
OM_test@h <- c(1,1)

# forcing perr to be constant across all simulations. Since OM specifies no
# inter-annual variability in recruitment, all draws of R are generated from the
# same value of perr, across simulations and years
OM_test@cpars$Perr <- rep(OM_test@cpars$Perr[1], OM_test@nsim)
OM_test@cpars$M <- rep(OM_test@cpars$M[1], OM_test@nsim)

# Simulate fishery history
OM_test_hist <- Simulate(OM_test)

# Historic annual recruitment, by simulation (as used by markdown documentation)
R_mse <- apply(OM_test_hist@AtAge$Number[, 1, , ], 1:2, sum)
R_mse <- data.frame(framework = "openMSE", R = as.vector(R_mse))

frw_sim_rec <- bind_rows(R_grym, R_mse) 

write_rds(frw_sim_rec, "frw_sim_rec.rds")
```


```{r}
#| echo: false
frw_sim_rec <- read_rds("frw_sim_rec.rds")
```


```{r}
#| fig-align: center
#| fig-cap: Comparison between simulated recruitment under each modelling framework
#| label: fig-recr-coherence-fwrks

# --- Graphical comparison
p <- frw_sim_rec |>
  ggplot(aes(x = framework, y = R)) +
  stat_histinterval(slab_color = "gray70", slab_fill = "gray85",
                    outline_bars = TRUE, breaks = 25, slab_linewidth = .7) +
  labs(y = "Simulated Recruitment", x = "Framework")

# ggsave(
#   p,
#   filename = "../part1_shared_files/outputs/grym_vs_openmse_recruitment_coherence_plot.png", 
#   width = 8, height = 5
# )

p
```




### Specify Management Plan


```{r}
OM_test <- openmse_scen_OMs$`scn-1`
OM_test@nsim <- 100

OM_test@reps <- 1

# Simulate fishery history
OM_test_hist <- Simulate(OM_test)

B0err <- rlnorm(OM_test@nsim, -grym_setups$B0logsd[1]^2/2, grym_setups$B0logsd[1])
B0err

# Generate MPs for gammas 
gammas <- c(0.05, 0.1) # seq(0, 0.17, by = 0.0025) #c(0, seq(0.0025, 0.19, by = 0.0025))
gamm_B0_MPs <- build_gammaB0(gammas = gammas, nyears = OM_test@nyears, B0err = B0err)

# Run projection
OM_test_proj <- Project(Hist = OM_test_hist, MPs = gamm_B0_MPs)
#test_MSE <- runMSE(OM_test, MPs = gamm_B0_MPs)

#summary(OM_test_proj)

OM_test_proj@TAC[1:10, 1, ]
OM_test_proj@TAC[1:10, 2, ]

OM_test_proj@OM$Depletion
OM_test_proj@RefPoint$ByYear$B0[, 1]
OM_test_proj@RefPoint$Dynamic_Unfished$B0[, 5]

```







### Set Performance Metrics



## Run openMSE Simulations

```{r}
#| eval: false

openmse_scen_mse <- openmse_scen_OMs |>
  imap(\(x, y){
    
    #x <- openmse_scen_OMs$`scn-1`
    #y <- "scn-1"
    
    #x@nsim <- 1000
    
    cli::cli_h1("Starting MSE run for {y} @ {Sys.time()}")
    
    # Simulate observational errors in survey estimates of B0. `B0logsd` is the
    # SD of survey estimates of (log) B0 conveying the  observational error in
    # surveys, assumed to be log-Normally distributed. `B0logsd` is calculated
    # externally from survey data.
    b0lgsd <- grym_setups |> filter(scenario_id == y) |> pull(B0logsd)
    B0err_draws <- rlnorm(x@nsim, -b0lgsd^2/2, b0lgsd)
    
    # build MPs for considered gammas
    gammas <- grym_setups |> filter(scenario_id == y) |> pull(gamma) |> pluck(1)
    gamma_B0_MPs <- build_gammaB0(
      gammas = gammas[gammas <= 0.2], 
      nyears = x@nyears, 
      B0err = B0err_draws)

    # run MSE for current scenario    
    tictoc::tic()
    mse_output <- runMSE(
      OM = x, 
      MPs = gamma_B0_MPs,
      #parallel = FALSE,
      parallel = "sac"
      )
    
    runtime <- tictoc::toc(quiet = TRUE)
    
    # write out mse outputs
    write_rds(
      mse_output,
      file = fs::path(outputs_path, glue::glue("openmse_mse_outputs_{y}.rds")), 
      compress  = "gz"
    )
    
    cli::cli_alert_success("Finished MSE for {y}: {runtime$callback_msg}")
    
    return(mse_output)
  })



```

## Results





<!-- Results 
 
- Compare via plots of median and quantiles (80% and 90%) of SSS trajectories
 through time, by gamma and scenario



-->