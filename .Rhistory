300*0.8
renv::activate()
library(DLMtool)
library(readxl)
library(openxlsx)
library(mvtnorm)
library(rlang)
library(purrr)
library(tidyr)
library(tictoc)
library(cli)
source("openmse_grym_approximation/R/ccamlr_krill_mngnt_fcts.R")
# Import the Operating Model from the excel workbook
OM_krill_grym_base <- XL2OM("openmse_grym_approximation/OM_grym_approx_base.xlsx")
cvR_M_draws_scen <- read_rds("openmse_grym_approximation/recruitment_scenarios/cvR_M_draws_scen.rds")
# Switch off age-plus group
OM_krill_grym_base@cpars$plusgroup <- 0
library(DLMtool)
library(readxl)
library(openxlsx)
library(mvtnorm)
library(rlang)
library(purrr)
library(tidyr)
library(tictoc)
library(cli)
library(redr)
library(readr)
cvR_M_draws_scen <- read_rds("openmse_grym_approximation/recruitment_scenarios/cvR_M_draws_scen.rds")
# Switch off age-plus group
OM_krill_grym_base@cpars$plusgroup <- 0
OM_krill_grym_scn <- OM_krill_grym_base
# overwriting number of projected years
OM_krill_grym_scn@proyears <- 20
OM_krill_grym_scn@nsim <- 2000  # nrow(cvR_M_draws_scen[[1]])
gammas <- seq(0, 0.17, by = 0.0025) #c(0, seq(0.0025, 0.19, by = 0.0025)) #c(0, seq(0.05, 0.20, by = 0.05))
gamm_B0_MPs <- build_gammaB0(gammas)
krill_mse_scen <- cvR_M_draws_scen |>
imap(function(x, y){
cli::cli_h1("Starting MSE run for {y}")
# x <- cvR_M_draws_scen[[4]]
# M and Recruitment Variance, from proportional recruitment estimation
cvR_M_draws <- mutate(x, M = M + 1e-5)
OM_krill_grym_scn@cpars$M <- cvR_M_draws$M
OM_krill_grym_scn@cpars$Perr <- sqrt(log(cvR_M_draws$CV^2 + 1)) # converting CV from PR to lognormal SD
# This is required to switch off age-plus group
OM_krill_grym_scn@cpars$plusgroup <- 0
# random number seed
set.seed(OM_krill_grym_scn@seed)
tictoc::tic()
mse_output <- runMSE(OM_krill_grym_scn, MPs = gamm_B0_MPs)#, parallel = TRUE)
runtime <- tictoc::toc(quiet = TRUE)
cli::cli_alert_success("Finished MSE for {y}: {runtime$callback_msg}")
return(mse_output)
})
library(tidyverse)
OM_krill_grym_scn <- OM_krill_grym_base
# overwriting number of projected years
OM_krill_grym_scn@proyears <- 20
OM_krill_grym_scn@nsim <- 2000  # nrow(cvR_M_draws_scen[[1]])
gammas <- seq(0, 0.17, by = 0.0025) #c(0, seq(0.0025, 0.19, by = 0.0025)) #c(0, seq(0.05, 0.20, by = 0.05))
gamm_B0_MPs <- build_gammaB0(gammas)
krill_mse_scen <- cvR_M_draws_scen |>
imap(function(x, y){
cli::cli_h1("Starting MSE run for {y}")
# x <- cvR_M_draws_scen[[4]]
# M and Recruitment Variance, from proportional recruitment estimation
cvR_M_draws <- mutate(x, M = M + 1e-5)
OM_krill_grym_scn@cpars$M <- cvR_M_draws$M
OM_krill_grym_scn@cpars$Perr <- sqrt(log(cvR_M_draws$CV^2 + 1)) # converting CV from PR to lognormal SD
# This is required to switch off age-plus group
OM_krill_grym_scn@cpars$plusgroup <- 0
# random number seed
set.seed(OM_krill_grym_scn@seed)
tictoc::tic()
mse_output <- runMSE(OM_krill_grym_scn, MPs = gamm_B0_MPs)#, parallel = TRUE)
runtime <- tictoc::toc(quiet = TRUE)
cli::cli_alert_success("Finished MSE for {y}: {runtime$callback_msg}")
return(mse_output)
})
setup()
setup(cpus = 6)
optCPU()
setup(cpus = 6)
krill_mse_scen <- cvR_M_draws_scen |>
imap(function(x, y){
cli::cli_h1("Starting MSE run for {y}")
# x <- cvR_M_draws_scen[[4]]
# M and Recruitment Variance, from proportional recruitment estimation
cvR_M_draws <- mutate(x, M = M + 1e-5)
OM_krill_grym_scn@cpars$M <- cvR_M_draws$M
OM_krill_grym_scn@cpars$Perr <- sqrt(log(cvR_M_draws$CV^2 + 1)) # converting CV from PR to lognormal SD
# This is required to switch off age-plus group
OM_krill_grym_scn@cpars$plusgroup <- 0
# random number seed
set.seed(OM_krill_grym_scn@seed)
tictoc::tic()
mse_output <- runMSE(OM_krill_grym_scn, MPs = gamm_B0_MPs, parallel = TRUE)
runtime <- tictoc::toc(quiet = TRUE)
cli::cli_alert_success("Finished MSE for {y}: {runtime$callback_msg}")
return(mse_output)
})
write_rds(krill_mse_scen, "openmse_grym_approximation/krill_mse_scen.rds")
write_rds(krill_mse_scen, "openmse_grym_approximation/krill_mse_scen.rds", compress = "gz")
library(progressr)
handlers(global = TRUE)
handlers("progress", "beepr")
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
library(furrr)
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
plan(multisession, workers = availableCores()-2)
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
my_fcn(1:5)
handlers("progress", handler_beepr(initiate = 11, finish = 8))
plan(multisession, workers = availableCores()-2)
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
handlers("progress", handler_beepr(finish = 8))
plan(multisession, workers = availableCores()-2)
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
my_fcn(1:5)
handlers("progress", "beepr")
plan(multisession, workers = availableCores()-2)
my_fcn <- function(xs) {
p <- progressor(along = xs)
future_map(xs, function(x) {
Sys.sleep(6.0-x)
p(sprintf("x=%g", x))
sqrt(x)
})
}
my_fcn(1:5)
library(tictoc)
tic()
with_progress(
cvR_M_trial_ibeta <- gen_recs(
dt = scens_sim_pars,
nsim = 10)
)
#| output: FALSE
# Load required R packages
library(Grym)
library(tidyverse)
library(readxl)
library(kableExtra)
library(furrr)
library(progressr)
library(patchwork)
# Source PR functions (from https://github.com/ccamlr/Grym_Base_Case/tree/Simulations/3_Code/Source)
source("prfit.R")
theme_set(theme_bw())
scens <- read_xlsx(
path = "maschetteetal_scenarios/Grym_parameter_combinations.xlsx"
) |>
rename(Scenario = Scenarios) |>
# filter scenarios under consideration
filter(
Scenario %in%
c("Initial_values", "Scenario_06", "Scenario_12", "Scenario_18",
"Scenario_24", "Scenario_30")
) |>
select(Scenario:`Recruitment group`, `Mean proportional recruitment`:`N. surveys`)
#| tbl-cap: "Proportional Recruitment estimates under each scenario (extracted from Maschette et al. 2021)"
# table with PR estimate
scens |>
kbl(digits = 4)|>
kable_styling(bootstrap_options = c("striped"), font_size = 15)
scens_sim_pars <- scens |>
rename(
mnQ = `Mean proportional recruitment`,
sdQ = `SD of proportional recruitment`,
n_surveys = `N. surveys`
) %>%
select(Scenario, mnQ, sdQ, n_surveys)
# Seven age classes, daily time steps - start modelling from age 1.
Ages <- 1:7
nsteps <- 365
Days <- seq(0, 1, length = nsteps+1)
h <- 1/nsteps
ages <- outer(Days, Ages, FUN="+")
head(ages)
# Define the within year pattern of natural mortality
ms <- matrix(1, nsteps+1, length(Ages))
Ms <- ctrapz(ms,h)
Msf <- final(Ms)
Msf
qdist <- qInverseBeta # qLogNormal
recdist <- recInverseBeta # recLogNormal
nsim <- 2000
# Best guess estimates of M and recruitment CV
M0 <- 0.6
CV0 <- 1
# reference age-class
ref_age <- 2
gen_recs <- function(dt, nsim){
p <- progressor(steps = nrow(dt))
dt |>
future_pmap(function(Scenario, mnQ, sdQ, n_surveys, M0, CV0, ref_age, qdist, Msf){
out <- replicate(
n = nsim,
expr = prFit(
qdist = qdist,
Msf = Msf,
mnR = mnQ,
vrR = sdQ^2,
n = n_surveys,
M0 = M0,
CV0 = CV0,
r = ref_age)
) |>
t() |>
data.frame()
p(sprintf("Finished %s", Scenario))
out
},
.options = furrr_options(seed = TRUE)
)
}
scens_sim_pars <- scens_sim_pars |>
mutate(M0, CV0, ref_age, qdist = list(qdist), Msf = list(Msf))
plan(multisession, workers = availableCores()-2)
handlers("progress")
tic()
with_progress(
cvR_M_trial_ibeta <- gen_recs(
dt = scens_sim_pars,
nsim = 10)
)
toc()
handlers("cli")
renv::status()
renv::snapshot()
